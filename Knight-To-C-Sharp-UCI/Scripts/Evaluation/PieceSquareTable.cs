using Score = EvaluationConstants.Score;

public static class PieceSquareTable
{
	static Score S(int mg, int eg) => new(mg, eg);

	public static readonly Score[] Pawn = {
		S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
        S(52, 84), S(60, 64), S(74, 94), S(45, 64), S(72, 78), S(24, 56), S(74, 97), S(29, 37),
        S(30, 54), S(20, 35), S(35, 50), S(31, 32), S(27, 44), S(27, 27), S(16, 37), S(19, 38),
        S(10, 27), S(21, 29), S(3, 34), S(46, 18), S(14, 27), S(27, 4), S(-5, 33), S(25, 4),
        S(7, 24), S(12, 12), S(4, 33), S(26, 12), S(21, 10), S(8, 7), S(1, -1), S(9, 12),
        S(8, 2), S(9, 19), S(8, 14), S(2, 12), S(4, 10), S(-4, -9), S(3, 7), S(7, -8),
        S(8, 16), S(15, 8), S(15, 21), S(-10, 14), S(-11, 6), S(11, 1), S(15, 1), S(7, 10),
        S(13, 5), S(6, 14), S(6, 10), S(7, 14), S(9, 11), S(12, 7), S(12, 13), S(13, 7)
	};
	public static readonly Score[] Knight = {
		S(96, -10), S(-110, -61), S(28, -8), S(-47, -26), S(-1, -12), S(-22, -34), S(-38, -36), S(-40, -66),
        S(-16, -26), S(-25, -36), S(22, -2), S(-26, -24), S(24, 17), S(-21, -43), S(0, -16), S(-30, -55),
        S(-15, -30), S(1, -18), S(7, 4), S(22, -8), S(21, 2), S(19, -2), S(5, -3), S(-14, -31),
        S(-37, -26), S(26, -7), S(4, 12), S(37, -6), S(10, 23), S(35, -11), S(12, 9), S(-18, -38),
        S(-26, -17), S(6, -8), S(16, 5), S(28, 7), S(21, -1), S(24, 7), S(3, -8), S(-16, -21),
        S(-12, -26), S(7, 7), S(14, 10), S(21, -4), S(23, 12), S(12, -8), S(8, 11), S(-25, -32),
        S(-35, -29), S(-10, -16), S(9, -4), S(6, -4), S(10, -4), S(2, 0), S(-7, -15), S(-34, -26),
        S(-44, -40), S(-33, -26), S(-21, -19), S(-18, -23), S(-18, -17), S(-17, -23), S(-29, -20), S(-39, -36)
	};
	public static readonly Score[] Bishop =  {
		S(38, 2), S(-27, -6), S(19, 8), S(-2, -14), S(-8, -6), S(0, -26), S(14, 4), S(-25, -36),
        S(12, -12), S(-26, -24), S(24, 17), S(-21, -43), S(20, 4), S(10, -15), S(15, 0), S(-9, -28),
        S(-13, -16), S(7, -23), S(11, -8), S(19, -2), S(15, 7), S(21, 4), S(-7, 4), S(11, -22),
        S(-21, -13), S(22, -21), S(-5, 8), S(30, -16), S(17, 14), S(17, -3), S(9, 18), S(-4, -18),
        S(-9, -20), S(8, -13), S(11, -11), S(19, 2), S(13, 2), S(24, 19), S(18, 4), S(-8, -8),
        S(-6, -10), S(16, -9), S(18, 7), S(12, -8), S(13, 16), S(15, 8), S(15, 21), S(0, -6),
        S(-1, -14), S(6, -4), S(5, -9), S(2, 0), S(13, 5), S(6, 14), S(11, 15), S(-3, 4),
        S(-11, -9), S(2, -3), S(2, 3), S(3, -3), S(1, 10), S(1, 4), S(-11, 6), S(-16, -8)
	};
	public static readonly Score[] Rook =  {
		S(29, 18), S(8, -4), S(2, 4), S(10, -16), S(24, 14), S(-5, -16), S(22, -2), S(-26, -24),
        S(39, 32), S(-1, -23), S(40, 24), S(30, 5), S(35, 20), S(21, 2), S(17, 14), S(22, -8),
        S(1, -18), S(9, -12), S(5, -3), S(16, -1), S(-7, 4), S(21, -12), S(-11, -3), S(12, -31),
        S(-15, -2), S(20, -26), S(7, 4), S(12, -8), S(4, 13), S(6, -8), S(1, -10), S(3, -18),
        S(-4, -26), S(9, -8), S(3, -8), S(14, 9), S(18, 4), S(2, 2), S(4, 0), S(1, -24),
        S(3, -8), S(2, -18), S(3, 6), S(5, -2), S(5, 11), S(10, 4), S(9, -4), S(-4, -14),
        S(-10, -24), S(2, 0), S(13, 5), S(6, 14), S(6, 10), S(7, 14), S(9, 11), S(-3, -8),
        S(-8, -7), S(-7, -13), S(11, 20), S(26, 29), S(14, 31), S(4, 12), S(-11, -6), S(-9, 2)
	};
	public static readonly Score[] Queen =  {
		S(-18, -16), S(0, -26), S(14, 4), S(-10, -21), S(17, -7), S(-36, -34), S(14, 7), S(-41, -63),
        S(10, -6), S(10, -15), S(15, 0), S(1, -18), S(-3, -6), S(7, -23), S(6, -13), S(-1, -22),
        S(-5, -13), S(16, -1), S(-2, 9), S(26, -7), S(-6, 2), S(22, -21), S(-10, 3), S(10, -36),
        S(2, -1), S(12, -8), S(9, 18), S(11, -3), S(6, -5), S(13, -8), S(1, -21), S(4, -13),
        S(3, -8), S(14, 9), S(23, 9), S(7, 7), S(9, 5), S(11, -14), S(8, -3), S(-3, -23),
        S(-7, -4), S(10, 3), S(10, 16), S(15, 9), S(14, 1), S(6, -4), S(5, -9), S(-8, -10),
        S(3, -5), S(6, 14), S(11, 15), S(7, 14), S(9, 11), S(12, 7), S(12, 13), S(3, -3),
        S(-9, 0), S(1, 4), S(-11, 6), S(-1, 7), S(4, 9), S(1, 12), S(7, 3), S(-15, 14)
	};
	public static readonly Score[] King = 
	{
		S(-56, -6), S(-75, -26), S(-48, -12), S(-96, -34), S(-46, 7), S(-91, -53), S(-50, -6), S(-70, -35),
        S(-45, -5), S(-59, -18), S(-63, -1), S(-53, -18), S(-54, -8), S(-51, -7), S(-55, -3), S(-44, -6),
        S(-47, -6), S(-29, -17), S(-61, 17), S(-43, 4), S(-70, 33), S(-30, -6), S(-43, -1), S(-28, -18),
        S(-26, -2), S(-34, -18), S(-39, 25), S(-42, 32), S(-49, 24), S(-31, 27), S(-37, -18), S(-16, -6),
        S(-2, -16), S(-28, -13), S(-26, 30), S(-34, 21), S(-32, 37), S(-28, 12), S(-27, -9), S(-15, -22),
        S(-5, -14), S(-10, -16), S(-11, 16), S(-19, 16), S(-15, 16), S(-18, 20), S(-7, -15), S(-4, -11),
        S(16, -20), S(17, -11), S(4, 11), S(7, 7), S(7, 13), S(8, 7), S(21, -5), S(21, -16),
        S(9, -34), S(19, -18), S(19, -16), S(6, -8), S(17, -17), S(0, 4), S(14, -16), S(-9, 16)
	};

	// Read the flipped square since the table is written in black's perspective
	[Inline]
    public static int Read(Score[] table, Square square, bool white, int phase = 0)
    {
        return table[white ? square.FlipRank() : square][phase];
    }

	public static int ReadTableFromPiece(Piece piece, Square square, bool color) {
		int type = piece.Type();
		
		if (type == PieceUtils.Pawn) {
			return Read(Pawn, square, color);
		}
		
		if (type == PieceUtils.Knight) {
			return Read(Knight, square, color);
		}
		
		if (type == PieceUtils.Bishop) {
			return Read(Bishop, square, color);
		}

		if (type == PieceUtils.Rook) {
			return Read(Rook, square, color);
		}

		if (type == PieceUtils.Queen) {
			return Read(Queen, square, color);
		}

		if (type == PieceUtils.King) {
			return Read(King, square, color);
		}

		return 0;
	}
}