using Score = EvaluationConstants.Score;

public static class PieceSquareTable
{
	static Score S(int mg, int eg) => new(mg, eg);

	public static readonly Score[] Pawn = {
		S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
		S(50, 80), S(50, 80), S(50, 80), S(50, 80), S(50, 80), S(50, 80), S(50, 80), S(50, 80),
		S(10, 50), S(10, 50), S(20, 50), S(30, 50), S(30, 50), S(20, 50), S(10, 50), S(10, 50),
		S(5, 30), S(5, 30), S(10, 30), S(25, 30), S(25, 30), S(10, 30), S(5, 30), S(5, 30),
		S(0, 20), S(0, 20), S(0, 20), S(20, 20), S(20, 20), S(0, 20), S(0, 20), S(0, 20),
		S(5, 10), S(-5, 10), S(-10, 10), S(0, 10), S(0, 10), S(-10, 10), S(-5, 10), S(5, 10),
		S(5, 10), S(10, 10), S(10, 10), S(-20, 10), S(-20, 10), S(10, 10), S(10, 10), S(5, 10),
		S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)
	};
	public static readonly Score[] Knight = {
		S(-50, -50), S(-40, -40), S(-30, -30), S(-30, -30), S(-30, -30), S(-30, -30), S(-40, -40), S(-50, -50),
		S(-40, -40), S(-20, -20), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-20, -20), S(-40, -40),
		S(-30, -30), S(0, 0), S(10, 10), S(15, 15), S(15, 15), S(10, 10), S(0, 0), S(-30, -30),
		S(-30, -30), S(5, 5), S(15, 15), S(20, 20), S(20, 20), S(15, 15), S(5, 5), S(-30, -30),
		S(-30, -30), S(0, 0), S(15, 15), S(20, 20), S(20, 20), S(15, 15), S(0, 0), S(-30, -30),
		S(-30, -30), S(5, 5), S(10, 10), S(15, 15), S(15, 15), S(10, 10), S(5, 5), S(-30, -30),
		S(-40, -40), S(-20, -20), S(0, 0), S(5, 5), S(5, 5), S(0, 0), S(-20, -20), S(-40, -40),
		S(-50, -50), S(-40, -40), S(-30, -30), S(-30, -30), S(-30, -30), S(-30, -30), S(-40, -40), S(-50, -50)
	};
	public static readonly Score[] Bishop =  {
		S(-20, -20), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-20, -20),
		S(-10, -10), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-10, -10),
		S(-10, -10), S(0, 0), S(5, 5), S(10, 10), S(10, 10), S(5, 5), S(0, 0), S(-10, -10),
		S(-10, -10), S(5, 5), S(5, 5), S(10, 10), S(10, 10), S(5, 5), S(5, 5), S(-10, -10),
		S(-10, -10), S(0, 0), S(10, 10), S(10, 10), S(10, 10), S(10, 10), S(0, 0), S(-10, -10),
		S(-10, -10), S(10, 10), S(10, 10), S(10, 10), S(10, 10), S(10, 10), S(10, 10), S(-10, -10),
		S(-10, -10), S(5, 5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(5, 5), S(-10, -10),
		S(-20, -20), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-10, -10), S(-20, -20)
	};
	public static readonly Score[] Rook =  {
		S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
		S(15, 15), S(20, 20), S(20, 20), S(20, 20), S(20, 20), S(20, 20), S(20, 20), S(15, 15),
		S(-5, -5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-5, -5),
		S(-5, -5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-5, -5),
		S(-5, -5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-5, -5),
		S(-5, -5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-5, -5),
		S(-15, -15), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-15, -15),
		S(-20, -20), S(-20, -20), S(0, 0), S(15, 15), S(15, 15), S(0, 0), S(-20, -20), S(-20, -20)
	};
	public static readonly Score[] Queen =  {
		S(-20, -20), S(-10, -10), S(-10, -10), S(-5, -5), S(-5, -5), S(-10, -10), S(-10, -10), S(-20, -20),
		S(-10, -10), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-10, -10),
		S(-10, -10), S(0, 0), S(5, 5), S(5, 5), S(5, 5), S(5, 5), S(0, 0), S(-10, -10),
		S(-5, -5), S(0, 0), S(5, 5), S(5, 5), S(5, 5), S(5, 5), S(0, 0), S(-5, -5),
		S(0, 0), S(0, 0), S(5, 5), S(5, 5), S(5, 5), S(5, 5), S(0, 0), S(-5, -5),
		S(-10, -10), S(5, 5), S(5, 5), S(5, 5), S(5, 5), S(5, 5), S(0, 0), S(-10, -10),
		S(-10, -10), S(0, 0), S(5, 5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(-10, -10),
		S(-20, -20), S(-10, -10), S(-10, -10), S(-5, -5), S(-5, -5), S(-10, -10), S(-10, -10), S(-20, -20)
	};
	public static readonly Score[] King = 
	{
		S(-80, -20), S(-70, -10), S(-70, -10), S(-70, -10), S(-70, -10), S(-70, -10), S(-70, -10), S(-80, -20), 
		S(-60, -5), S(-60, 0), S(-60, 5), S(-60, 5), S(-60, 5), S(-60, 5), S(-60, 0), S(-60, -5), 
		S(-40, -10), S(-50, -5), S(-50, 20), S(-60, 30), S(-60, 30), S(-50, 20), S(-50, -5), S(-40, -10), 
		S(-30, -15), S(-40, -10), S(-40, 35), S(-50, 45), S(-50, 45), S(-40, 35), S(-40, -10), S(-30, -15), 
		S(-20, -20), S(-30, -15), S(-30, 30), S(-40, 40), S(-40, 40), S(-30, 30), S(-30, -15), S(-20, -20), 
		S(-10, -25), S(-20, -20), S(-20, 20), S(-20, 25), S(-20, 25), S(-20, 20), S(-20, -20), S(-10, -25), 
		S(10, -30), S(10, -25), S(-5, 0), S(-5, 0), S(-5, 0), S(-5, 0), S(10, -25), S(10, -30), 
		S(10, -50), S(15, -30), S(10, -30), S(-5, -30), S(0, -30), S(-5, -30), S(15, -30), S(10, -50)
	};

	// Read the flipped square since the table is written in black's perspective
	[Inline]
    public static int Read(Score[] table, Square square, bool white, int phase = 0)
    {
        return table[white ? square.FlipRank() : square][phase];
    }

	public static int ReadTableFromPiece(Piece piece, Square square, bool color) {
		int type = piece.Type();
		
		if (type == PieceUtils.Pawn) {
			return Read(Pawn, square, color);
		}
		
		if (type == PieceUtils.Knight) {
			return Read(Knight, square, color);
		}
		
		if (type == PieceUtils.Bishop) {
			return Read(Bishop, square, color);
		}

		if (type == PieceUtils.Rook) {
			return Read(Rook, square, color);
		}

		if (type == PieceUtils.Queen) {
			return Read(Queen, square, color);
		}

		if (type == PieceUtils.King) {
			return Read(King, square, color);
		}

		return 0;
	}
}